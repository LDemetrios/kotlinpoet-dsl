package org.ldemetrios.kotlinpoet

import com.squareup.kotlinpoet.ClassName
import java.util.*

public val BI_CONSUMER : ClassName = ClassName("java.util.function", "BiConsumer")
public val BI_FUNCTION : ClassName = ClassName("java.util.function", "BiFunction")
public val BINARY_OPERATOR : ClassName = ClassName("java.util.function", "BinaryOperator")
public val BI_PREDICATE : ClassName = ClassName("java.util.function", "BiPredicate")
public val BOOLEAN_SUPPLIER : ClassName = ClassName("java.util.function", "BooleanSupplier")
public val CONSUMER : ClassName = ClassName("java.util.function", "Consumer")
public val DOUBLE_BINARY_OPERATOR : ClassName = ClassName("java.util.function", "DoubleBinaryOperator")
public val DOUBLE_CONSUMER : ClassName = ClassName("java.util.function", "DoubleConsumer")
public val DOUBLE_FUNCTION : ClassName = ClassName("java.util.function", "DoubleFunction")
public val DOUBLE_PREDICATE : ClassName = ClassName("java.util.function", "DoublePredicate")
public val DOUBLE_SUPPLIER : ClassName = ClassName("java.util.function", "DoubleSupplier")
public val DOUBLE_TO_INT_FUNCTION : ClassName = ClassName("java.util.function", "DoubleToIntFunction")
public val DOUBLE_TO_LONG_FUNCTION : ClassName = ClassName("java.util.function", "DoubleToLongFunction")
public val DOUBLE_UNARY_OPERATOR : ClassName = ClassName("java.util.function", "DoubleUnaryOperator")
public val FUNCTION : ClassName = ClassName("java.util.function", "Function")
public val INT_BINARY_OPERATOR : ClassName = ClassName("java.util.function", "IntBinaryOperator")
public val INT_CONSUMER : ClassName = ClassName("java.util.function", "IntConsumer")
public val INT_FUNCTION : ClassName = ClassName("java.util.function", "IntFunction")
public val INT_PREDICATE : ClassName = ClassName("java.util.function", "IntPredicate")
public val INT_SUPPLIER : ClassName = ClassName("java.util.function", "IntSupplier")
public val INT_TO_DOUBLE_FUNCTION : ClassName = ClassName("java.util.function", "IntToDoubleFunction")
public val INT_TO_LONG_FUNCTION : ClassName = ClassName("java.util.function", "IntToLongFunction")
public val INT_UNARY_OPERATOR : ClassName = ClassName("java.util.function", "IntUnaryOperator")
public val LONG_BINARY_OPERATOR : ClassName = ClassName("java.util.function", "LongBinaryOperator")
public val LONG_CONSUMER : ClassName = ClassName("java.util.function", "LongConsumer")
public val LONG_FUNCTION : ClassName = ClassName("java.util.function", "LongFunction")
public val LONG_PREDICATE : ClassName = ClassName("java.util.function", "LongPredicate")
public val LONG_SUPPLIER : ClassName = ClassName("java.util.function", "LongSupplier")
public val LONG_TO_DOUBLE_FUNCTION : ClassName = ClassName("java.util.function", "LongToDoubleFunction")
public val LONG_TO_INT_FUNCTION : ClassName = ClassName("java.util.function", "LongToIntFunction")
public val LONG_UNARY_OPERATOR : ClassName = ClassName("java.util.function", "LongUnaryOperator")
public val OBJ_DOUBLE_CONSUMER : ClassName = ClassName("java.util.function", "ObjDoubleConsumer")
public val OBJ_INT_CONSUMER : ClassName = ClassName("java.util.function", "ObjIntConsumer")
public val OBJ_LONG_CONSUMER : ClassName = ClassName("java.util.function", "ObjLongConsumer")
public val PREDICATE : ClassName = ClassName("java.util.function", "Predicate")
public val SUPPLIER : ClassName = ClassName("java.util.function", "Supplier")
public val TO_DOUBLE_BI_FUNCTION : ClassName = ClassName("java.util.function", "ToDoubleBiFunction")
public val TO_DOUBLE_FUNCTION : ClassName = ClassName("java.util.function", "ToDoubleFunction")
public val TO_INT_BI_FUNCTION : ClassName = ClassName("java.util.function", "ToIntBiFunction")
public val TO_INT_FUNCTION : ClassName = ClassName("java.util.function", "ToIntFunction")
public val TO_LONG_BI_FUNCTION : ClassName = ClassName("java.util.function", "ToLongBiFunction")
public val TO_LONG_FUNCTION : ClassName = ClassName("java.util.function", "ToLongFunction")
public val UNARY_OPERATOR : ClassName = ClassName("java.util.function", "UnaryOperator")

public val ABSTRACT_COLLECTION : ClassName = ClassName("java.util", "AbstractCollection")
public val ABSTRACT_LIST : ClassName = ClassName("java.util", "AbstractList")
public val ABSTRACT_MAP : ClassName = ClassName("java.util", "AbstractMap")
public val ABSTRACT_QUEUE : ClassName = ClassName("java.util", "AbstractQueue")
public val ABSTRACT_SEQUENTIAL_LIST : ClassName = ClassName("java.util", "AbstractSequentialList")
public val ABSTRACT_SET : ClassName = ClassName("java.util", "AbstractSet")
public val ARRAY_DEQUE : ClassName = ClassName("java.util", "ArrayDeque")
public val ARRAY_LIST : ClassName = ClassName("java.util", "ArrayList")
public val ARRAYS : ClassName = ClassName("java.util", "Arrays")
public val BASE64 : ClassName = ClassName("java.util", "Base64")
public val BIT_SET : ClassName = ClassName("java.util", "BitSet")
public val CALENDAR : ClassName = ClassName("java.util", "Calendar")
public val COLLECTION : ClassName = ClassName("java.util", "Collection")
public val COLLECTIONS : ClassName = ClassName("java.util", "Collections")
public val COMPARATOR : ClassName = ClassName("java.util", "Comparator")
public val CONCURRENT_MODIFICATION_EXCEPTION : ClassName = ClassName("java.util", "ConcurrentModificationException")
public val CURRENCY : ClassName = ClassName("java.util", "Currency")
public val DATE : ClassName = ClassName("java.util", "Date")
public val DEQUE : ClassName = ClassName("java.util", "Deque")
public val DICTIONARY : ClassName = ClassName("java.util", "Dictionary")
public val DOUBLE_SUMMARY_STATISTICS : ClassName = ClassName("java.util", "DoubleSummaryStatistics")
public val DUPLICATE_FORMAT_FLAGS_EXCEPTION : ClassName = ClassName("java.util", "DuplicateFormatFlagsException")
public val EMPTY_STACK_EXCEPTION : ClassName = ClassName("java.util", "EmptyStackException")
public val ENUMERATION : ClassName = ClassName("java.util", "Enumeration")
public val ENUM_MAP : ClassName = ClassName("java.util", "EnumMap")
public val ENUM_SET : ClassName = ClassName("java.util", "EnumSet")
public val EVENT_LISTENER : ClassName = ClassName("java.util", "EventListener")
public val EVENT_LISTENER_PROXY : ClassName = ClassName("java.util", "EventListenerProxy")
public val EVENT_OBJECT : ClassName = ClassName("java.util", "EventObject")
public val FORMAT_FLAGS_CONVERSION_MISMATCH_EXCEPTION : ClassName = ClassName("java.util", "FormatFlagsConversionMismatchException")
public val FORMAT_PROCESSOR : ClassName = ClassName("java.util", "FormatProcessor")
public val FORMATTABLE : ClassName = ClassName("java.util", "Formattable")
public val FORMATTABLE_FLAGS : ClassName = ClassName("java.util", "FormattableFlags")
public val FORMATTER : ClassName = ClassName("java.util", "Formatter")
public val FORMATTER_CLOSED_EXCEPTION : ClassName = ClassName("java.util", "FormatterClosedException")
public val GREGORIAN_CALENDAR : ClassName = ClassName("java.util", "GregorianCalendar")
public val HASH_MAP : ClassName = ClassName("java.util", "HashMap")
public val HASH_SET : ClassName = ClassName("java.util", "HashSet")
public val HASHTABLE : ClassName = ClassName("java.util", "Hashtable")
public val HEX_FORMAT : ClassName = ClassName("java.util", "HexFormat")
public val IDENTITY_HASH_MAP : ClassName = ClassName("java.util", "IdentityHashMap")
public val ILLEGAL_FORMAT_CODE_POINT_EXCEPTION : ClassName = ClassName("java.util", "IllegalFormatCodePointException")
public val ILLEGAL_FORMAT_CONVERSION_EXCEPTION : ClassName = ClassName("java.util", "IllegalFormatConversionException")
public val ILLEGAL_FORMAT_EXCEPTION : ClassName = ClassName("java.util", "IllegalFormatException")
public val ILLEGAL_FORMAT_FLAGS_EXCEPTION : ClassName = ClassName("java.util", "IllegalFormatFlagsException")
public val ILLEGAL_FORMAT_PRECISION_EXCEPTION : ClassName = ClassName("java.util", "IllegalFormatPrecisionException")
public val ILLEGAL_FORMAT_WIDTH_EXCEPTION : ClassName = ClassName("java.util", "IllegalFormatWidthException")
public val ILLFORMED_LOCALE_EXCEPTION : ClassName = ClassName("java.util", "IllformedLocaleException")
public val INPUT_MISMATCH_EXCEPTION : ClassName = ClassName("java.util", "InputMismatchException")
public val INT_SUMMARY_STATISTICS : ClassName = ClassName("java.util", "IntSummaryStatistics")
public val INVALID_PROPERTIES_FORMAT_EXCEPTION : ClassName = ClassName("java.util", "InvalidPropertiesFormatException")
public val LINKED_HASH_MAP : ClassName = ClassName("java.util", "LinkedHashMap")
public val LINKED_HASH_SET : ClassName = ClassName("java.util", "LinkedHashSet")
public val LINKED_LIST : ClassName = ClassName("java.util", "LinkedList")
public val LIST_RESOURCE_BUNDLE : ClassName = ClassName("java.util", "ListResourceBundle")
public val LOCALE : ClassName = ClassName("java.util", "Locale")
public val LONG_SUMMARY_STATISTICS : ClassName = ClassName("java.util", "LongSummaryStatistics")
public val MISSING_FORMAT_ARGUMENT_EXCEPTION : ClassName = ClassName("java.util", "MissingFormatArgumentException")
public val MISSING_FORMAT_WIDTH_EXCEPTION : ClassName = ClassName("java.util", "MissingFormatWidthException")
public val MISSING_RESOURCE_EXCEPTION : ClassName = ClassName("java.util", "MissingResourceException")
public val NAVIGABLE_MAP : ClassName = ClassName("java.util", "NavigableMap")
public val NAVIGABLE_SET : ClassName = ClassName("java.util", "NavigableSet")
public val NO_SUCH_ELEMENT_EXCEPTION : ClassName = ClassName("java.util", "NoSuchElementException")
public val OBJECTS : ClassName = ClassName("java.util", "Objects")
public val OPTIONAL : ClassName = ClassName("java.util", "Optional")
public val OPTIONAL_DOUBLE : ClassName = ClassName("java.util", "OptionalDouble")
public val OPTIONAL_INT : ClassName = ClassName("java.util", "OptionalInt")
public val OPTIONAL_LONG : ClassName = ClassName("java.util", "OptionalLong")
public val PRIMITIVE_ITERATOR : ClassName = ClassName("java.util", "PrimitiveIterator")
public val PRIORITY_QUEUE : ClassName = ClassName("java.util", "PriorityQueue")
public val PROPERTIES : ClassName = ClassName("java.util", "Properties")
public val PROPERTY_PERMISSION : ClassName = ClassName("java.util", "PropertyPermission")
public val PROPERTY_RESOURCE_BUNDLE : ClassName = ClassName("java.util", "PropertyResourceBundle")
public val QUEUE : ClassName = ClassName("java.util", "Queue")
public val RANDOM : ClassName = ClassName("java.util", "Random")
public val RANDOM_ACCESS : ClassName = ClassName("java.util", "RandomAccess")
public val RESOURCE_BUNDLE : ClassName = ClassName("java.util", "ResourceBundle")
public val SCANNER : ClassName = ClassName("java.util", "Scanner")
public val SEQUENCED_COLLECTION : ClassName = ClassName("java.util", "SequencedCollection")
public val SEQUENCED_MAP : ClassName = ClassName("java.util", "SequencedMap")
public val SEQUENCED_SET : ClassName = ClassName("java.util", "SequencedSet")
public val SERVICE_CONFIGURATION_ERROR : ClassName = ClassName("java.util", "ServiceConfigurationError")
public val SERVICE_LOADER : ClassName = ClassName("java.util", "ServiceLoader")
public val SIMPLE_TIME_ZONE : ClassName = ClassName("java.util", "SimpleTimeZone")
public val SORTED_MAP : ClassName = ClassName("java.util", "SortedMap")
public val SORTED_SET : ClassName = ClassName("java.util", "SortedSet")
public val SPLITERATOR : ClassName = ClassName("java.util", "Spliterator")
public val SPLITERATORS : ClassName = ClassName("java.util", "Spliterators")
public val SPLITTABLE_RANDOM : ClassName = ClassName("java.util", "SplittableRandom")
public val STRING_JOINER : ClassName = ClassName("java.util", "StringJoiner")
public val STRING_TOKENIZER : ClassName = ClassName("java.util", "StringTokenizer")
public val TIMER : ClassName = ClassName("java.util", "Timer")
public val TIMER_TASK : ClassName = ClassName("java.util", "TimerTask")
public val TIME_ZONE : ClassName = ClassName("java.util", "TimeZone")
public val TOO_MANY_LISTENERS_EXCEPTION : ClassName = ClassName("java.util", "TooManyListenersException")
public val TREE_MAP : ClassName = ClassName("java.util", "TreeMap")
public val TREE_SET : ClassName = ClassName("java.util", "TreeSet")
public val UNKNOWN_FORMAT_CONVERSION_EXCEPTION : ClassName = ClassName("java.util", "UnknownFormatConversionException")
public val UNKNOWN_FORMAT_FLAGS_EXCEPTION : ClassName = ClassName("java.util", "UnknownFormatFlagsException")
public val U_U_I_D : ClassName = ClassName("java.util", "UUID")
public val WEAK_HASH_MAP : ClassName = ClassName("java.util", "WeakHashMap")

public val STREAM : ClassName = ClassName("java.util.stream", "Stream")

